
#include<iostream>
using namespace std;

// origial matrix defined
int SM[4][5] =
{
	{0 , 0 , 3 , 0 , 4 },
	{0 , 0 , 5 , 7 , 0 },
	{0 , 0 , 0 , 0 , 0 },
	{0 , 2 , 6 , 0 , 0 }
};


class Node
{
public:
	Node* next;
	int row;
	int column;
	int data;
};


// Define a Function add a new node with row, column, value
//values for this function comes from the main body when value is not 0
void addNode(Node** p, int rowPosition,  int colPosition, int value )
{
	Node* temp = *p;
	Node* n;

	// if value is empty, this is the start of the linklist
	if (temp == NULL)
	{
		temp = new Node();
		temp->row = rowPosition;
		temp->column = colPosition;
		temp->data = value;
		temp->next = NULL;
		*p = temp;
		/*cout << "temp->row " << temp->row << endl;
		cout << "temp->column " << temp->column << endl;
		cout << "temp->data " << temp->data << endl;
		cout << "temp->next " << temp->next << endl;
		cout << "*p " << *p << endl;*/
	}

	// when it is not empty we need to append vappend consecutive values
	else
	{
		while (temp->next != NULL)
			temp = temp->next;

		n = new Node();
		n->row = rowPosition;
		n->column = colPosition;
		n->data = value;
		n->next = NULL;
		temp->next = n;
		/*cout << "temp->row " << temp->row << endl;
		cout << "temp->column " << temp->column << endl;
		cout << "temp->data " << temp->data << endl;
		cout << "temp->next " << temp->next << endl; */
	}
}



void printList(Node* start)
{
	cout << " Node Structure: [Row][Colunm][Value][Next node]" << endl;

	Node* listLink = start;

	cout << endl;
	while (listLink != NULL)
	{
		
		cout << "[" << listLink->row << "]";
		cout << "[" << listLink->column << "]";
		cout << "[" << listLink->data << "]";
		cout << "["<< listLink-> next<<"] ";
		cout << "->";
		listLink = listLink->next;
	}

	cout << " NULL" << endl;

}

int main()
{
	
	// Creating head node = NULL
	Node* head = NULL;

	//evaluating if number id bigger than 0 to create the array
	//if it is, it calls the addNode funtion with head, rowI,colunmJ, and value for position SM[i][j]
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			
			if (SM[i][j] != 0)//if value in the matrix position is not 0
				addNode(&head, i, j,SM[i][j]); // call function addNode
		}
	}
	
	printList(head);

	return 0;
}

